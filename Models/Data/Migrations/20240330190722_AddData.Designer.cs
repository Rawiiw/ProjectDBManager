// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectDBManager.Models.Data;

#nullable disable

namespace ProjectDBManager.Migrations
{
    [DbContext(typeof(EDBContext))]
    [Migration("20240330190722_AddData")]
    partial class AddData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Email = "sk464656@gmail.com",
                            FirstName = "Sasha",
                            LastName = "Kosinova",
                            MiddleName = "Igorevna"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Email = "vanya@example.com",
                            FirstName = "Ivan",
                            LastName = "Popov",
                            MiddleName = "Sergeevich"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Email = "borya@example.com",
                            FirstName = "Boris",
                            LastName = "Cherniy",
                            MiddleName = "Petrovich"
                        });
                });

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("CustomerCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExecutorCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CustomerCompanyName = "Sber",
                            DirectorId = 1,
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExecutorCompanyName = "Galera",
                            Name = "  Sybers",
                            Priority = 1,
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProjectId = 2,
                            CustomerCompanyName = "Sber",
                            DirectorId = 2,
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExecutorCompanyName = "IDK",
                            Name = "Uralski Pelmeni",
                            Priority = 2,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ProjectId = 3,
                            CustomerCompanyName = "Ozon",
                            DirectorId = 3,
                            EndDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ExecutorCompanyName = "Wildberries",
                            Name = "Amazon",
                            Priority = 3,
                            StartDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.ProjectEmployee", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ProjectEmployee");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            EmployeeId = 1,
                            Id = 0
                        },
                        new
                        {
                            ProjectId = 2,
                            EmployeeId = 2,
                            Id = 0
                        },
                        new
                        {
                            ProjectId = 3,
                            EmployeeId = 3,
                            Id = 0
                        });
                });

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.Project", b =>
                {
                    b.HasOne("ProjectDBManager.Models.Data.Entities.Employee", null)
                        .WithMany("DirectingProjects")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.ProjectEmployee", b =>
                {
                    b.HasOne("ProjectDBManager.Models.Data.Entities.Employee", "Employee")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectDBManager.Models.Data.Entities.Project", "Project")
                        .WithMany("ProjectEmployees")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.Employee", b =>
                {
                    b.Navigation("DirectingProjects");

                    b.Navigation("ProjectEmployees");
                });

            modelBuilder.Entity("ProjectDBManager.Models.Data.Entities.Project", b =>
                {
                    b.Navigation("ProjectEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
